var searchIndex = {};
searchIndex["mg_settings"] = {"doc":"Parse config files.","items":[[3,"MetaData","mg_settings","Command/setting meta-data coming from the attributes. See `EnumMetaData` to see the list of supported attributes.",null,null],[12,"completion_hidden","","Whether this command/setting should be shown in the completion or not.",0,null],[12,"help_text","","The help text associated with this command/setting.",0,null],[12,"is_special_command","","Whether this is a special command or not. This is not applicable to settings.",0,null],[3,"Config","","The parsing configuration.",null,null],[12,"application_commands","","The application library commands.",1,null],[12,"mapping_modes","","The available mapping modes for the map command.",1,null],[3,"Parser","","The config parser.",null,null],[4,"Command","","The `Command` enum represents a command from a config file.",null,null],[13,"App","","A command from the application library.",2,null],[13,"Custom","","A custom command.",2,null],[13,"Map","","A map command creates a new key mapping.",2,null],[12,"action","mg_settings::Command","The action that will be executed when the `keys` are pressed.",2,null],[12,"keys","","The key shortcut to trigger the action.",2,null],[12,"mode","","The mode in which this mapping is available.",2,null],[13,"Set","mg_settings","A set command sets a value to an option.",2,null],[13,"Unmap","","An unmap command removes a key mapping.",2,null],[12,"keys","mg_settings::Command","The key shortcut to remove.",2,null],[12,"mode","","The mode in which this mapping is available.",2,null],[4,"Value","mg_settings","The `Value` enum represents a value along with its type.",null,null],[13,"Bool","","Boolean value.",3,null],[13,"Float","","Floating-point value.",3,null],[13,"Int","","Integer value.",3,null],[13,"Str","","String value.",3,null],[0,"error","","Parse error type.",null,null],[3,"ParseError","mg_settings::error","Struct which holds information about an error at a specific position.",null,null],[12,"expected","","The expected token.",4,null],[12,"typ","","The error type.",4,null],[12,"unexpected","","The unexpected token.",4,null],[4,"Error","","Errors which can happen when parsing a settings file.",null,null],[13,"Io","","Input/output error.",5,null],[13,"Parse","","Parse error.",5,null],[4,"ErrorType","","A set of error types that can occur parsing the settings file.",null,null],[13,"MissingArgument","","A missing argument.",6,null],[13,"NoCommand","","No command (or a comment) was entered.",6,null],[13,"Parse","","Parse error.",6,null],[13,"UnknownCommand","","Unknown command.",6,null],[4,"SettingError","","Error when getting/setting settings.",null,null],[13,"UnknownChoice","","Unknown setting value choice.",7,null],[12,"actual","mg_settings::error::SettingError","The actual value.",7,null],[12,"expected","","The list of expected values.",7,null],[13,"UnknownSetting","mg_settings::error","Unknown setting name.",7,null],[13,"WrongType","","Wrong value type for setting.",7,null],[12,"actual","mg_settings::error::SettingError","The actual type.",7,null],[12,"expected","","The expected type.",7,null],[6,"Result","mg_settings::error","A type alias over the specific `Result` type used by the parser to indicate whether it is successful or not.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new error.",4,{"inputs":[{"name":"errortype"},{"name":"string"},{"name":"string"},{"name":"pos"}],"output":{"name":"parseerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"errortype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"key","mg_settings","Type for representing keys and functions for parsing strings into `Key`s.",null,null],[4,"Key","mg_settings::key","Enum representing the keys that can be used in a mapping.",null,null],[13,"Backspace","","Backspace key.",8,null],[13,"Char","","A single-character key.",8,null],[13,"Control","","Control + another key.",8,null],[13,"Down","","Down arrow.",8,null],[13,"Enter","","Enter key.",8,null],[13,"Escape","","Escape key.",8,null],[13,"F1","","Function key 1",8,null],[13,"F2","","Function key 2",8,null],[13,"F3","","Function key 3",8,null],[13,"F4","","Function key 4",8,null],[13,"F5","","Function key 5",8,null],[13,"F6","","Function key 6",8,null],[13,"F7","","Function key 7",8,null],[13,"F8","","Function key 8",8,null],[13,"F9","","Function key 9",8,null],[13,"F10","","Function key 10",8,null],[13,"F11","","Function key 11",8,null],[13,"F12","","Function key 12",8,null],[13,"Left","","Left arrow.",8,null],[13,"Right","","Right arrow.",8,null],[13,"Shift","","Shift + another key.",8,null],[13,"Space","","Space key.",8,null],[13,"Tab","","Tab key.",8,null],[13,"Up","","Up arrow.",8,null],[5,"parse_keys","","Parse a string into a vector of `Key`s.",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"key"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"key"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"settings","mg_settings","Settings manager.",null,null],[8,"Settings","mg_settings::settings","Settings manager.",null,null],[16,"Variant","","The variant enum representing the setting setters.",9,null],[10,"set_value","","Set a setting value from its variant.",9,null],[10,"to_variant","","Convert a name and value to a variant.",9,{"inputs":[{"name":"str"},{"name":"value"}],"output":{"name":"result"}}],[8,"CompletionValues","mg_settings","Trait to specify the completion values for a type.",null,null],[10,"completion_values","","Get the completion values for the type.",10,{"inputs":[],"output":{"name":"vec"}}],[8,"EnumFromStr","","The `EnumFromStr` trait is used to specify how to construct an enum value from a string.",null,null],[10,"create","","Create the enum value from the `variant` string and an `argument` string.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"has_argument","","Check wether the enum variant has an argument.",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"EnumMetaData","","Tre `EnumMetaData` trait is used to get associated meta-data for the enum variants. The meta-data is specified using the following attributes: #[completion(hidden)] #[special_command] #[help(Command help)]",null,null],[10,"get_metadata","","Get the metadata associated with the enum.",12,{"inputs":[],"output":{"name":"hashmap"}}],[8,"SettingCompletion","","Trait specifying the value completions for settings.",null,null],[10,"get_value_completions","","Get the value completions of all the setting.",13,{"inputs":[],"output":{"name":"hashmap"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"command"}],"output":{"name":"bool"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Create a new parser without config.",14,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_config","","Create a new parser with config.",14,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"parse","","Parse settings.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"parse_line","","Parse a single line of settings.",14,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_include_path","","Set the directory where the include command will look for files to include.",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"to_type","","Get a string representation of the value.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"MetaData"],[3,"Config"],[4,"Command"],[4,"Value"],[3,"ParseError"],[4,"Error"],[4,"ErrorType"],[4,"SettingError"],[4,"Key"],[8,"Settings"],[8,"CompletionValues"],[8,"EnumFromStr"],[8,"EnumMetaData"],[8,"SettingCompletion"],[3,"Parser"]]};
initSearch(searchIndex);
