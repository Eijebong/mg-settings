var searchIndex = {};
searchIndex["mg_settings"] = {"doc":"Parse config files.","items":[[3,"Config","mg_settings","The parsing configuration.",null,null],[12,"mapping_modes","","The available mapping modes for the map command.",0,null],[3,"Parser","","The config parser.",null,null],[4,"Command","","The `Command` enum represents a command from a config file.",null,null],[13,"Custom","","A custom command.",1,null],[13,"Include","","An include command includes another configuration file.",1,null],[13,"Map","","A map command creates a new key mapping.",1,null],[12,"action","mg_settings::Command","The action that will be executed when the `keys` are pressed.",1,null],[12,"keys","","The key shortcut to trigger the action.",1,null],[12,"mode","","The mode in which this mapping is available.",1,null],[13,"Set","mg_settings","A set command sets a value to an option.",1,null],[13,"Unmap","","An unmap command removes a key mapping.",1,null],[12,"keys","mg_settings::Command","The key shortcut to remove.",1,null],[12,"mode","","The mode in which this mapping is available.",1,null],[4,"Value","mg_settings","The `Value` enum represents a value along with its type.",null,null],[13,"Bool","","Boolean value.",2,null],[13,"Float","","Floating-point value.",2,null],[13,"Int","","Integer value.",2,null],[13,"Str","","String value.",2,null],[0,"error","","Parse error type.",null,null],[3,"Error","mg_settings::error","Struct which holds information about an error at a specific position.",null,null],[12,"expected","","The expected token.",3,null],[12,"typ","","The error type.",3,null],[12,"unexpected","","The unexpected token.",3,null],[4,"ErrorType","","A set of error types that can occur parsing the settings file.",null,null],[13,"MissingArgument","","A missing argument.",4,null],[13,"NoCommand","","No command (or a comment) was entered.",4,null],[13,"Parse","","Parse error.",4,null],[13,"UnknownCommand","","Unknown command.",4,null],[6,"Result","","A type alias over the specific `Result` type used by the parser to indicate whether it is\nsuccessful or not.",null,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"new","","Create a new error.",3,{"inputs":[{"name":"errortype"},{"name":"string"},{"name":"string"},{"name":"pos"}],"output":{"name":"error"}}],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[0,"key","mg_settings","Type for representing keys and functions for parsing strings into `Key`s.",null,null],[4,"Key","mg_settings::key","Enum representing the keys that can be used in a mapping.",null,null],[13,"Char","","A single-character key.",5,null],[13,"Control","","Control + another key.",5,null],[13,"Down","","Down arrow.",5,null],[13,"Enter","","Enter key.",5,null],[13,"Escape","","Escape key.",5,null],[13,"F1","","Function key 1",5,null],[13,"F2","","Function key 2",5,null],[13,"F3","","Function key 3",5,null],[13,"F4","","Function key 4",5,null],[13,"F5","","Function key 5",5,null],[13,"F6","","Function key 6",5,null],[13,"F7","","Function key 7",5,null],[13,"F8","","Function key 8",5,null],[13,"F9","","Function key 9",5,null],[13,"F10","","Function key 10",5,null],[13,"F11","","Function key 11",5,null],[13,"F12","","Function key 12",5,null],[13,"Left","","Left arrow.",5,null],[13,"Right","","Right arrow.",5,null],[13,"Space","","Space key.",5,null],[13,"Tab","","Tab key.",5,null],[13,"Up","","Up arrow.",5,null],[5,"parse_keys","","Parse a string into a vector of `Key`s.",null,{"inputs":[{"name":"str"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[8,"EnumFromStr","mg_settings","The `EnumFromStr` trait is used to specify how to construct an enum value from a string.",null,null],[10,"create","","Create the enum value from the `variant` string and an `argument` string.",6,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"has_argument","","Check wether the enum variant has an argument.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"default","","",0,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Create a new parser without config.",7,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_config","","Create a new parser with config.",7,{"inputs":[{"name":"config"}],"output":{"name":"self"}}],[11,"parse","","Parse settings.",7,null],[11,"parse_line","","Parse a single line of settings.",7,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[14,"commands","","",null,null]],"paths":[[3,"Config"],[4,"Command"],[4,"Value"],[3,"Error"],[4,"ErrorType"],[4,"Key"],[8,"EnumFromStr"],[3,"Parser"]]};
initSearch(searchIndex);
